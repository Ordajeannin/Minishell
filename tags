!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	includes/libft.h	24;"	d
BUFFER_SIZE	libft/includes/libft.h	24;"	d
CC	libft/Makefile	/^CC			= gcc$/;"	m
CC	makefile	/^CC				= gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS 			= -Werror -Wextra -Wall -I$/;"	m
CFLAGS	makefile	/^CFLAGS			= -Wall -Werror -Wextra$/;"	m
ERROR	includes/minishell.h	29;"	d
ERROR_NOENV	includes/minishell.h	28;"	d
INCLUDES	libft/Makefile	/^INCLUDES		= includes$/;"	m
INCLUDES	makefile	/^INCLUDES		= -Iincludes -Ilibft$/;"	m
LIBFT	makefile	/^LIBFT			= -Llibft -lft$/;"	m
LIBFT_H	includes/libft.h	13;"	d
LIBFT_H	libft/includes/libft.h	13;"	d
MINISHELL_H	includes/minishell.h	15;"	d
NAME	libft/Makefile	/^NAME 			= libft.a $/;"	m
NAME	makefile	/^NAME			= minishell$/;"	m
OBJ	libft/Makefile	/^OBJ			= $(addprefix $(OBJ_DIR), $(addsuffix .o, $(SRC_FILES)))$/;"	m
OBJF	libft/Makefile	/^OBJF			= .cache_exists$/;"	m
OBJS	makefile	/^OBJS			:= $(patsubst $(SRC_DIR)\/%.c, $(OBJ_DIR)\/%.o, $(SRCS))$/;"	m
OBJ_DIR	libft/Makefile	/^OBJ_DIR			= obj\/$/;"	m
OBJ_DIR	makefile	/^OBJ_DIR			= obj$/;"	m
READLINE	makefile	/^READLINE		= -lreadline$/;"	m
SRC	libft/Makefile	/^SRC			= $(addprefix $(SRC_DIR), $(addsuffix .c, $(SRC_FILES)))$/;"	m
SRCS	makefile	/^SRCS			:= $(SRC_FILES)$/;"	m
SRC_DIR	libft/Makefile	/^SRC_DIR			= src\/$/;"	m
SRC_DIR	makefile	/^SRC_DIR			= srcs$/;"	m
SRC_FILES	libft/Makefile	/^SRC_FILES 		= ft_atoi			\\$/;"	m
SRC_FILES	makefile	/^SRC_FILES		:= $(shell find $(SRC_DIR) -type f -name "*.c")$/;"	m
TOKEN_AND	includes/minishell.h	33;"	d
TOKEN_APPEND	includes/minishell.h	38;"	d
TOKEN_CMD	includes/minishell.h	31;"	d
TOKEN_DELIM	includes/minishell.h	37;"	d
TOKEN_FPATH	includes/minishell.h	39;"	d
TOKEN_INFILE	includes/minishell.h	35;"	d
TOKEN_OPTION	includes/minishell.h	32;"	d
TOKEN_OUTFILE	includes/minishell.h	36;"	d
TOKEN_PIPE	includes/minishell.h	34;"	d
TOKEN_RPATH	includes/minishell.h	40;"	d
add_arg	srcs/parsing/list_of_args.c	/^void	add_arg(t_args **list, char *str, int token)$/;"	f
all_cmd	srcs/env_concerns.c	/^void	all_cmd(t_args *arg, t_shell *shell, t_args **list)$/;"	f
args_handle	srcs/main.c	/^static void	args_handle(t_args **list, t_shell *shell, t_args *env_list)$/;"	f	file:
bf_prd	srcs/print_things.c	/^static void	bf_prd(char *str, int d, char *color)$/;"	f	file:
cd_specialcase	srcs/local_cmd.c	/^static char	*cd_specialcase(t_args *list, t_shell *shell)$/;"	f	file:
change_env	srcs/env_concerns.c	/^void	change_env(t_args **env_list, char *new_str, char *change_value)$/;"	f
clear_args_list	srcs/parsing/list_of_args.c	/^void	clear_args_list(t_args **list)$/;"	f
cmd_paths	includes/minishell.h	/^	char	**cmd_paths;$/;"	m	struct:s_shell
content	includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
count_words	libft/src/ft_split.c	/^static	int	count_words(const char *str, char c)$/;"	f	file:
create_arg	srcs/parsing/list_of_args.c	/^static t_args	*create_arg(char *str, int token)$/;"	f	file:
delimit_to_token	srcs/parsing/parsing_input.c	/^static void	delimit_to_token(char *str, t_args **list)$/;"	f	file:
extract_cmd_path	srcs/parsing/parsing_env.c	/^char	*extract_cmd_path(char **paths, char *cmd)$/;"	f
find_opt	srcs/echo.c	/^int	find_opt(char *s1, char *s2)$/;"	f
from_input_to_list_of_args	srcs/parsing/list_of_args.c	/^void	from_input_to_list_of_args(char *input, t_args **list)$/;"	f
ft_atoi	libft/src/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/src/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/src/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_cd	srcs/local_cmd.c	/^void	ft_cd(t_args *list, t_shell *shell, t_args *env_list)$/;"	f
ft_char_in_set	libft/src/ft_strtrim.c	/^static	int	ft_char_in_set(char c, char const *set)$/;"	f	file:
ft_echo	srcs/echo.c	/^void	ft_echo(t_args *list)$/;"	f
ft_env	srcs/env_concerns.c	/^void	ft_env(t_args *list, t_args *env_list)$/;"	f
ft_formats	libft/src/ft_printf.c	/^int	ft_formats(va_list args, const char conv)$/;"	f
ft_gain_place	srcs/main.c	/^static void	ft_gain_place(char **av, t_args **list, char **input,$/;"	f	file:
ft_get_line	libft/src/get_next_line_bonus.c	/^char	*ft_get_line(char *stash)$/;"	f
ft_is_newline	libft/src/get_next_line_utils_bonus.c	/^char	*ft_is_newline(char *str)$/;"	f
ft_isalnum	libft/src/ft_isalnum.c	/^int	ft_isalnum(int a)$/;"	f
ft_isalpha	libft/src/ft_isalpha.c	/^int	ft_isalpha(int a)$/;"	f
ft_isascii	libft/src/ft_isascii.c	/^int	ft_isascii(int a)$/;"	f
ft_isdigit	libft/src/ft_isdigit.c	/^int	ft_isdigit(int a)$/;"	f
ft_isprint	libft/src/ft_isprint.c	/^int	ft_isprint(int a)$/;"	f
ft_itoa	libft/src/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_len	libft/src/ft_itoa.c	/^static	int	ft_len(int n)$/;"	f	file:
ft_lstadd_back	libft/src/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/src/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/src/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/src/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/src/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void*))$/;"	f
ft_lstlast	libft/src/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/src/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/src/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/src/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/src/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/src/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/src/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/src/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft/src/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_minitoa	libft/src/ft_itoa.c	/^static	char	*ft_minitoa(int n)$/;"	f	file:
ft_nbr_len	libft/src/ft_print_unsigned.c	/^int	ft_nbr_len(unsigned int nbr)$/;"	f
ft_print_char	libft/src/ft_printf.c	/^int	ft_print_char(int c)$/;"	f
ft_print_hexa	libft/src/ft_print_hexa.c	/^int	ft_print_hexa(unsigned long int nbr, const char conv)$/;"	f
ft_print_nbr	libft/src/ft_print_str_nbr.c	/^int	ft_print_nbr(int n)$/;"	f
ft_print_percent	libft/src/ft_print_percent.c	/^int	ft_print_percent(void)$/;"	f
ft_print_ptr	libft/src/ft_print_ptr.c	/^int	ft_print_ptr(unsigned long int ptr)$/;"	f
ft_print_str	libft/src/ft_print_str_nbr.c	/^int	ft_print_str(char *str)$/;"	f
ft_print_unsigned	libft/src/ft_print_unsigned.c	/^int	ft_print_unsigned(unsigned int n)$/;"	f
ft_printf	libft/src/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f
ft_put_in_hexa	libft/src/ft_print_hexa.c	/^int	ft_put_in_hexa(unsigned long int nbr, char *hexa)$/;"	f
ft_putchar_fd	libft/src/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/src/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/src/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/src/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_pwd	srcs/local_cmd.c	/^void	ft_pwd(void)$/;"	f
ft_read	libft/src/get_next_line_bonus.c	/^char	*ft_read(int fd, char *stash)$/;"	f
ft_reput_ptrvalue_in_hexa	libft/src/ft_print_ptr.c	/^int	ft_reput_ptrvalue_in_hexa(unsigned long int nbr)$/;"	f
ft_split	libft/src/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/src/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcspn	srcs/parsing/parsing_input.c	/^static size_t	ft_strcspn(const char *input, char **reject, t_args **list)$/;"	f	file:
ft_strdup	libft/src/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_striteri	libft/src/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *d))$/;"	f
ft_strjoin	libft/src/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin2	libft/src/get_next_line_utils_bonus.c	/^char	*ft_strjoin2(char *stash, char *buffer)$/;"	f
ft_strlcat	libft/src/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/src/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/src/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen2	libft/src/get_next_line_utils_bonus.c	/^int	ft_strlen2(char *str)$/;"	f
ft_strmapi	libft/src/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/src/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/src/ft_strnstr.c	/^char	*ft_strnstr(const char *ocean, const char *pearl, size_t len)$/;"	f
ft_strrchr	libft/src/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strspn	srcs/parsing/parsing_input.c	/^static size_t	ft_strspn(const char *input, char **accept, t_args **list)$/;"	f	file:
ft_strtok	srcs/parsing/parsing_input.c	/^char	*ft_strtok(char *input, char **delim, t_args **list)$/;"	f
ft_strtrim	libft/src/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/src/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/src/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/src/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_uitoa	libft/src/ft_print_unsigned.c	/^char	*ft_uitoa(unsigned int n)$/;"	f
ft_unset	srcs/local_cmd.c	/^void	ft_unset(t_args *list, t_shell *shell, t_args *env_list)$/;"	f
ft_update_stash	libft/src/get_next_line_bonus.c	/^char	*ft_update_stash(char *stash)$/;"	f
ft_write_number	libft/src/ft_itoa.c	/^static	char	*ft_write_number(int len, int n, char *a)$/;"	f	file:
get_next_line	libft/src/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f
handle_env	srcs/parsing/parsing_env.c	/^int	handle_env(char **env, t_shell *shell)$/;"	f
help_strtok	srcs/parsing/parsing_input.c	/^static void	help_strtok(char *token_end, char **last_token)$/;"	f	file:
helpsplit	libft/src/ft_split.c	/^static	char	**helpsplit(int index, char const *s, char c)$/;"	f	file:
home	includes/minishell.h	/^	char	*home;$/;"	m	struct:s_shell
hostname	includes/minishell.h	/^	char	*hostname;$/;"	m	struct:s_shell
input	includes/minishell.h	/^	char	**input;$/;"	m	struct:s_shell
iter_echo	srcs/echo.c	/^void	iter_echo(t_args *list)$/;"	f
lang	includes/minishell.h	/^	char	*lang;$/;"	m	struct:s_shell
loop_args	srcs/env_concerns.c	/^void	loop_args(t_shell *shell, t_args **list)$/;"	f
main	srcs/main.c	/^int	main(int ac, char **av, char **env)$/;"	f
msg	srcs/handle_error.c	/^int	msg(char *msg)$/;"	f
next	includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	includes/minishell.h	/^	struct s_args	*next;$/;"	m	struct:s_args	typeref:struct:s_args::s_args
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
oldpwd	includes/minishell.h	/^	char	*oldpwd;$/;"	m	struct:s_shell
path	includes/minishell.h	/^	char	*path;$/;"	m	struct:s_shell
print_args_list	srcs/print_things.c	/^void	print_args_list(t_args **list)$/;"	f
pwd	includes/minishell.h	/^	char	*pwd;$/;"	m	struct:s_shell
s_args	includes/minishell.h	/^typedef struct s_args$/;"	s
s_list	includes/libft.h	/^typedef struct s_list$/;"	s
s_list	libft/includes/libft.h	/^typedef struct s_list$/;"	s
s_shell	includes/minishell.h	/^typedef struct s_shell$/;"	s
searchin_env	srcs/local_cmd.c	/^static int	searchin_env(t_args **env_list, t_args *list)$/;"	f	file:
set_env	srcs/main.c	/^static int	set_env(t_args **env_list, char **env, t_shell *shell)$/;"	f	file:
shell	includes/minishell.h	/^	char	*shell;$/;"	m	struct:s_shell
shell_change	srcs/env_concerns.c	/^void	shell_change(t_shell *shell, t_args *list)$/;"	f
shell_style	srcs/print_things.c	/^void	shell_style(t_shell *shell)$/;"	f
shlvl	includes/minishell.h	/^	char	*shlvl;$/;"	m	struct:s_shell
str	includes/minishell.h	/^	char			*str;$/;"	m	struct:s_args
t_args	includes/minishell.h	/^}	t_args;$/;"	t	typeref:struct:s_args
t_list	includes/libft.h	/^}			t_list;$/;"	t	typeref:struct:s_list
t_list	libft/includes/libft.h	/^}			t_list;$/;"	t	typeref:struct:s_list
t_shell	includes/minishell.h	/^}	t_shell;$/;"	t	typeref:struct:s_shell
term	includes/minishell.h	/^	char	*term;$/;"	m	struct:s_shell
token	includes/minishell.h	/^	int				token;$/;"	m	struct:s_args
tokenize_args	srcs/parsing/parsing_token.c	/^int	tokenize_args(char *input)$/;"	f
until_char	srcs/utils.c	/^char	*until_char(char *str, int c)$/;"	f
update_args	srcs/parsing/parsing_token.c	/^void	update_args(t_args **list)$/;"	f
user	includes/minishell.h	/^	char	*user;$/;"	m	struct:s_shell
word_dup	libft/src/ft_split.c	/^static	char	*word_dup(const char *str, int start, int finish)$/;"	f	file:
